/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface GalaxyNFTClaimingInterface extends utils.Interface {
  functions: {
    "claim(uint256,address,uint256,uint256,address,bytes)": FunctionFragment;
    "claimCapped(uint256,address,uint256,uint256,uint256,address,bytes)": FunctionFragment;
    "campaignFeeConfigs(uint256)": FunctionFragment;
    "numMinted(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "claim",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      string,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimCapped",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "campaignFeeConfigs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "numMinted",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimCapped",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignFeeConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "numMinted", data: BytesLike): Result;

  events: {
    "EventClaim(uint256,uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EventClaim"): EventFragment;
}

export type EventClaimEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string],
  { _cid: BigNumber; _dummyId: BigNumber; _nftID: BigNumber; _sender: string }
>;

export type EventClaimEventFilter = TypedEventFilter<EventClaimEvent>;

export interface GalaxyNFTClaiming extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GalaxyNFTClaimingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claim(
      _cid: BigNumberish,
      _starNFT: string,
      _dummyId: BigNumberish,
      _powah: BigNumberish,
      _mintTo: string,
      _signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimCapped(
      _cid: BigNumberish,
      _starNFT: string,
      _dummyId: BigNumberish,
      _powah: BigNumberish,
      _cap: BigNumberish,
      _mintTo: string,
      _signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    campaignFeeConfigs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        erc20: string;
        erc20Fee: BigNumber;
        platformFee: BigNumber;
      }
    >;

    numMinted(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  claim(
    _cid: BigNumberish,
    _starNFT: string,
    _dummyId: BigNumberish,
    _powah: BigNumberish,
    _mintTo: string,
    _signature: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimCapped(
    _cid: BigNumberish,
    _starNFT: string,
    _dummyId: BigNumberish,
    _powah: BigNumberish,
    _cap: BigNumberish,
    _mintTo: string,
    _signature: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  campaignFeeConfigs(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      erc20: string;
      erc20Fee: BigNumber;
      platformFee: BigNumber;
    }
  >;

  numMinted(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    claim(
      _cid: BigNumberish,
      _starNFT: string,
      _dummyId: BigNumberish,
      _powah: BigNumberish,
      _mintTo: string,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    claimCapped(
      _cid: BigNumberish,
      _starNFT: string,
      _dummyId: BigNumberish,
      _powah: BigNumberish,
      _cap: BigNumberish,
      _mintTo: string,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    campaignFeeConfigs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        erc20: string;
        erc20Fee: BigNumber;
        platformFee: BigNumber;
      }
    >;

    numMinted(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "EventClaim(uint256,uint256,uint256,address)"(
      _cid?: null,
      _dummyId?: null,
      _nftID?: null,
      _sender?: null
    ): EventClaimEventFilter;
    EventClaim(
      _cid?: null,
      _dummyId?: null,
      _nftID?: null,
      _sender?: null
    ): EventClaimEventFilter;
  };

  estimateGas: {
    claim(
      _cid: BigNumberish,
      _starNFT: string,
      _dummyId: BigNumberish,
      _powah: BigNumberish,
      _mintTo: string,
      _signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimCapped(
      _cid: BigNumberish,
      _starNFT: string,
      _dummyId: BigNumberish,
      _powah: BigNumberish,
      _cap: BigNumberish,
      _mintTo: string,
      _signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    campaignFeeConfigs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numMinted(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claim(
      _cid: BigNumberish,
      _starNFT: string,
      _dummyId: BigNumberish,
      _powah: BigNumberish,
      _mintTo: string,
      _signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimCapped(
      _cid: BigNumberish,
      _starNFT: string,
      _dummyId: BigNumberish,
      _powah: BigNumberish,
      _cap: BigNumberish,
      _mintTo: string,
      _signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    campaignFeeConfigs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numMinted(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
