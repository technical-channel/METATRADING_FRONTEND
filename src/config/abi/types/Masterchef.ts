/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type PoolInfoStruct = {
  accCakePerShare: BigNumberish;
  lastRewardBlock: BigNumberish;
  allocPoint: BigNumberish;
  totalBoostedShare: BigNumberish;
  isRegular: boolean;
};

export type PoolInfoStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  boolean
] & {
  accCakePerShare: BigNumber;
  lastRewardBlock: BigNumber;
  allocPoint: BigNumber;
  totalBoostedShare: BigNumber;
  isRegular: boolean;
};

export interface MasterchefInterface extends utils.Interface {
  functions: {
    "CAKE()": FunctionFragment;
    "MASTER_CHEF()": FunctionFragment;
    "MASTER_PID()": FunctionFragment;
    "add(uint256,address,bool,bool)": FunctionFragment;
    "boostContract()": FunctionFragment;
    "burnAdmin()": FunctionFragment;
    "burnCake()": FunctionFragment;
    "cakePerBlock(bool)": FunctionFragment;
    "cakePerBlockToBurn()": FunctionFragment;
    "cakeRateToBurn()": FunctionFragment;
    "cakeRateToRegularFarm()": FunctionFragment;
    "cakeRateToSpecialFarm()": FunctionFragment;
    "deposit(uint256,uint256)": FunctionFragment;
    "emergencyWithdraw(uint256)": FunctionFragment;
    "getBoostValue(address,uint256)": FunctionFragment;
    "harvestFromMasterChef()": FunctionFragment;
    "init(address)": FunctionFragment;
    "lastBurnedBlock()": FunctionFragment;
    "lpToken(uint256)": FunctionFragment;
    "massUpdatePools()": FunctionFragment;
    "maxBoostValue()": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingCake(uint256,address)": FunctionFragment;
    "poolInfo(uint256)": FunctionFragment;
    "poolLength()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "set(uint256,uint256,bool)": FunctionFragment;
    "totalRegularAllocPoint()": FunctionFragment;
    "totalSpecialAllocPoint()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateBoostContract(address,uint256)": FunctionFragment;
    "updateBurnAdmin(address)": FunctionFragment;
    "updateCakeRate(uint256,uint256,uint256)": FunctionFragment;
    "updatePool(uint256)": FunctionFragment;
    "updateUserBoost(address,uint256)": FunctionFragment;
    "updateWhiteList(address,bool)": FunctionFragment;
    "userInfo(uint256,address)": FunctionFragment;
    "whiteListMapping(address)": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "CAKE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MASTER_CHEF",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MASTER_PID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "add",
    values: [BigNumberish, string, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "boostContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "burnAdmin", values?: undefined): string;
  encodeFunctionData(functionFragment: "burnCake", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cakePerBlock",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "cakePerBlockToBurn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cakeRateToBurn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cakeRateToRegularFarm",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cakeRateToSpecialFarm",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBoostValue",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "harvestFromMasterChef",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "init", values: [string]): string;
  encodeFunctionData(
    functionFragment: "lastBurnedBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lpToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "massUpdatePools",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxBoostValue",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingCake",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "poolInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "set",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "totalRegularAllocPoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSpecialAllocPoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBoostContract",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBurnAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCakeRate",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUserBoost",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWhiteList",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "whiteListMapping",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "CAKE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MASTER_CHEF",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MASTER_PID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "boostContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burnAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnCake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cakePerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cakePerBlockToBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cakeRateToBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cakeRateToRegularFarm",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cakeRateToSpecialFarm",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBoostValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "harvestFromMasterChef",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastBurnedBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lpToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "massUpdatePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxBoostValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingCake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolLength", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalRegularAllocPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSpecialAllocPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBoostContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBurnAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCakeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateUserBoost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whiteListMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AddPool(uint256,uint256,address,bool)": EventFragment;
    "Deposit(address,uint256,uint256)": EventFragment;
    "EmergencyWithdraw(address,uint256,uint256)": EventFragment;
    "Init()": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SetPool(uint256,uint256)": EventFragment;
    "UpdateBoostContract(address,uint256)": EventFragment;
    "UpdateBurnAdmin(address,address)": EventFragment;
    "UpdateCakeRate(uint256,uint256,uint256)": EventFragment;
    "UpdatePool(uint256,uint256,uint256,uint256)": EventFragment;
    "UpdateUserBoost(address,uint256,uint256)": EventFragment;
    "UpdateWhiteList(address,bool)": EventFragment;
    "Withdraw(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Init"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateBoostContract"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateBurnAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateCakeRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatePool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateUserBoost"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateWhiteList"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type AddPoolEvent = TypedEvent<
  [BigNumber, BigNumber, string, boolean],
  { pid: BigNumber; allocPoint: BigNumber; lpToken: string; isRegular: boolean }
>;

export type AddPoolEventFilter = TypedEventFilter<AddPoolEvent>;

export type DepositEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { user: string; pid: BigNumber; amount: BigNumber }
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export type EmergencyWithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { user: string; pid: BigNumber; amount: BigNumber }
>;

export type EmergencyWithdrawEventFilter =
  TypedEventFilter<EmergencyWithdrawEvent>;

export type InitEvent = TypedEvent<[], {}>;

export type InitEventFilter = TypedEventFilter<InitEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type SetPoolEvent = TypedEvent<
  [BigNumber, BigNumber],
  { pid: BigNumber; allocPoint: BigNumber }
>;

export type SetPoolEventFilter = TypedEventFilter<SetPoolEvent>;

export type UpdateBoostContractEvent = TypedEvent<
  [string, BigNumber],
  { boostContract: string; maxBoostVal: BigNumber }
>;

export type UpdateBoostContractEventFilter =
  TypedEventFilter<UpdateBoostContractEvent>;

export type UpdateBurnAdminEvent = TypedEvent<
  [string, string],
  { oldAdmin: string; newAdmin: string }
>;

export type UpdateBurnAdminEventFilter = TypedEventFilter<UpdateBurnAdminEvent>;

export type UpdateCakeRateEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  {
    burnRate: BigNumber;
    regularFarmRate: BigNumber;
    specialFarmRate: BigNumber;
  }
>;

export type UpdateCakeRateEventFilter = TypedEventFilter<UpdateCakeRateEvent>;

export type UpdatePoolEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  {
    pid: BigNumber;
    lastRewardBlock: BigNumber;
    lpSupply: BigNumber;
    accCakePerShare: BigNumber;
  }
>;

export type UpdatePoolEventFilter = TypedEventFilter<UpdatePoolEvent>;

export type UpdateUserBoostEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { user: string; oldBoostVal: BigNumber; newBoostVal: BigNumber }
>;

export type UpdateUserBoostEventFilter = TypedEventFilter<UpdateUserBoostEvent>;

export type UpdateWhiteListEvent = TypedEvent<
  [string, boolean],
  { user: string; isValid: boolean }
>;

export type UpdateWhiteListEventFilter = TypedEventFilter<UpdateWhiteListEvent>;

export type WithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { user: string; pid: BigNumber; amount: BigNumber }
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface Masterchef extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MasterchefInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CAKE(overrides?: CallOverrides): Promise<[string]>;

    MASTER_CHEF(overrides?: CallOverrides): Promise<[string]>;

    MASTER_PID(overrides?: CallOverrides): Promise<[BigNumber]>;

    add(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _isRegular: boolean,
      _withUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    boostContract(overrides?: CallOverrides): Promise<[string]>;

    burnAdmin(overrides?: CallOverrides): Promise<[string]>;

    burnCake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cakePerBlock(
      _isRegular: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    cakePerBlockToBurn(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    cakeRateToBurn(overrides?: CallOverrides): Promise<[BigNumber]>;

    cakeRateToRegularFarm(overrides?: CallOverrides): Promise<[BigNumber]>;

    cakeRateToSpecialFarm(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBoostValue(
      _user: string,
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    harvestFromMasterChef(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    init(
      dummyToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lastBurnedBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    lpToken(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    massUpdatePools(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maxBoostValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingCake(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        accCakePerShare: BigNumber;
        lastRewardBlock: BigNumber;
        allocPoint: BigNumber;
        totalBoostedShare: BigNumber;
        isRegular: boolean;
      }
    >;

    poolLength(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { pools: BigNumber }>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalRegularAllocPoint(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSpecialAllocPoint(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateBoostContract(
      _newBoostContract: string,
      _maxBoostVal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateBurnAdmin(
      _newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCakeRate(
      _burnRate: BigNumberish,
      _regularFarmRate: BigNumberish,
      _specialFarmRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePool(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateUserBoost(
      _user: string,
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateWhiteList(
      _user: string,
      _isValid: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;

    whiteListMapping(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  CAKE(overrides?: CallOverrides): Promise<string>;

  MASTER_CHEF(overrides?: CallOverrides): Promise<string>;

  MASTER_PID(overrides?: CallOverrides): Promise<BigNumber>;

  add(
    _allocPoint: BigNumberish,
    _lpToken: string,
    _isRegular: boolean,
    _withUpdate: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  boostContract(overrides?: CallOverrides): Promise<string>;

  burnAdmin(overrides?: CallOverrides): Promise<string>;

  burnCake(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cakePerBlock(
    _isRegular: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cakePerBlockToBurn(overrides?: CallOverrides): Promise<BigNumber>;

  cakeRateToBurn(overrides?: CallOverrides): Promise<BigNumber>;

  cakeRateToRegularFarm(overrides?: CallOverrides): Promise<BigNumber>;

  cakeRateToSpecialFarm(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    _pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBoostValue(
    _user: string,
    _pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  harvestFromMasterChef(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  init(
    dummyToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lastBurnedBlock(overrides?: CallOverrides): Promise<BigNumber>;

  lpToken(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  massUpdatePools(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maxBoostValue(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingCake(
    _pid: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      accCakePerShare: BigNumber;
      lastRewardBlock: BigNumber;
      allocPoint: BigNumber;
      totalBoostedShare: BigNumber;
      isRegular: boolean;
    }
  >;

  poolLength(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  set(
    _pid: BigNumberish,
    _allocPoint: BigNumberish,
    _withUpdate: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalRegularAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

  totalSpecialAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateBoostContract(
    _newBoostContract: string,
    _maxBoostVal: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateBurnAdmin(
    _newAdmin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCakeRate(
    _burnRate: BigNumberish,
    _regularFarmRate: BigNumberish,
    _specialFarmRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePool(
    _pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateUserBoost(
    _user: string,
    _pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateWhiteList(
    _user: string,
    _isValid: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
  >;

  whiteListMapping(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  withdraw(
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CAKE(overrides?: CallOverrides): Promise<string>;

    MASTER_CHEF(overrides?: CallOverrides): Promise<string>;

    MASTER_PID(overrides?: CallOverrides): Promise<BigNumber>;

    add(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _isRegular: boolean,
      _withUpdate: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    boostContract(overrides?: CallOverrides): Promise<string>;

    burnAdmin(overrides?: CallOverrides): Promise<string>;

    burnCake(overrides?: CallOverrides): Promise<void>;

    cakePerBlock(
      _isRegular: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cakePerBlockToBurn(overrides?: CallOverrides): Promise<BigNumber>;

    cakeRateToBurn(overrides?: CallOverrides): Promise<BigNumber>;

    cakeRateToRegularFarm(overrides?: CallOverrides): Promise<BigNumber>;

    cakeRateToSpecialFarm(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getBoostValue(
      _user: string,
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harvestFromMasterChef(overrides?: CallOverrides): Promise<void>;

    init(dummyToken: string, overrides?: CallOverrides): Promise<void>;

    lastBurnedBlock(overrides?: CallOverrides): Promise<BigNumber>;

    lpToken(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    massUpdatePools(overrides?: CallOverrides): Promise<void>;

    maxBoostValue(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingCake(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        accCakePerShare: BigNumber;
        lastRewardBlock: BigNumber;
        allocPoint: BigNumber;
        totalBoostedShare: BigNumber;
        isRegular: boolean;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    totalRegularAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    totalSpecialAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateBoostContract(
      _newBoostContract: string,
      _maxBoostVal: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateBurnAdmin(
      _newAdmin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCakeRate(
      _burnRate: BigNumberish,
      _regularFarmRate: BigNumberish,
      _specialFarmRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePool(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PoolInfoStructOutput>;

    updateUserBoost(
      _user: string,
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateWhiteList(
      _user: string,
      _isValid: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;

    whiteListMapping(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddPool(uint256,uint256,address,bool)"(
      pid?: BigNumberish | null,
      allocPoint?: null,
      lpToken?: string | null,
      isRegular?: null
    ): AddPoolEventFilter;
    AddPool(
      pid?: BigNumberish | null,
      allocPoint?: null,
      lpToken?: string | null,
      isRegular?: null
    ): AddPoolEventFilter;

    "Deposit(address,uint256,uint256)"(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null
    ): DepositEventFilter;
    Deposit(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null
    ): DepositEventFilter;

    "EmergencyWithdraw(address,uint256,uint256)"(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null
    ): EmergencyWithdrawEventFilter;
    EmergencyWithdraw(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null
    ): EmergencyWithdrawEventFilter;

    "Init()"(): InitEventFilter;
    Init(): InitEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "SetPool(uint256,uint256)"(
      pid?: BigNumberish | null,
      allocPoint?: null
    ): SetPoolEventFilter;
    SetPool(pid?: BigNumberish | null, allocPoint?: null): SetPoolEventFilter;

    "UpdateBoostContract(address,uint256)"(
      boostContract?: string | null,
      maxBoostVal?: null
    ): UpdateBoostContractEventFilter;
    UpdateBoostContract(
      boostContract?: string | null,
      maxBoostVal?: null
    ): UpdateBoostContractEventFilter;

    "UpdateBurnAdmin(address,address)"(
      oldAdmin?: string | null,
      newAdmin?: string | null
    ): UpdateBurnAdminEventFilter;
    UpdateBurnAdmin(
      oldAdmin?: string | null,
      newAdmin?: string | null
    ): UpdateBurnAdminEventFilter;

    "UpdateCakeRate(uint256,uint256,uint256)"(
      burnRate?: null,
      regularFarmRate?: null,
      specialFarmRate?: null
    ): UpdateCakeRateEventFilter;
    UpdateCakeRate(
      burnRate?: null,
      regularFarmRate?: null,
      specialFarmRate?: null
    ): UpdateCakeRateEventFilter;

    "UpdatePool(uint256,uint256,uint256,uint256)"(
      pid?: BigNumberish | null,
      lastRewardBlock?: null,
      lpSupply?: null,
      accCakePerShare?: null
    ): UpdatePoolEventFilter;
    UpdatePool(
      pid?: BigNumberish | null,
      lastRewardBlock?: null,
      lpSupply?: null,
      accCakePerShare?: null
    ): UpdatePoolEventFilter;

    "UpdateUserBoost(address,uint256,uint256)"(
      user?: string | null,
      oldBoostVal?: null,
      newBoostVal?: null
    ): UpdateUserBoostEventFilter;
    UpdateUserBoost(
      user?: string | null,
      oldBoostVal?: null,
      newBoostVal?: null
    ): UpdateUserBoostEventFilter;

    "UpdateWhiteList(address,bool)"(
      user?: string | null,
      isValid?: null
    ): UpdateWhiteListEventFilter;
    UpdateWhiteList(
      user?: string | null,
      isValid?: null
    ): UpdateWhiteListEventFilter;

    "Withdraw(address,uint256,uint256)"(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    CAKE(overrides?: CallOverrides): Promise<BigNumber>;

    MASTER_CHEF(overrides?: CallOverrides): Promise<BigNumber>;

    MASTER_PID(overrides?: CallOverrides): Promise<BigNumber>;

    add(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _isRegular: boolean,
      _withUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    boostContract(overrides?: CallOverrides): Promise<BigNumber>;

    burnAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    burnCake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cakePerBlock(
      _isRegular: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cakePerBlockToBurn(overrides?: CallOverrides): Promise<BigNumber>;

    cakeRateToBurn(overrides?: CallOverrides): Promise<BigNumber>;

    cakeRateToRegularFarm(overrides?: CallOverrides): Promise<BigNumber>;

    cakeRateToSpecialFarm(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBoostValue(
      _user: string,
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harvestFromMasterChef(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    init(
      dummyToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lastBurnedBlock(overrides?: CallOverrides): Promise<BigNumber>;

    lpToken(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    massUpdatePools(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maxBoostValue(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingCake(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfo(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalRegularAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    totalSpecialAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateBoostContract(
      _newBoostContract: string,
      _maxBoostVal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateBurnAdmin(
      _newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCakeRate(
      _burnRate: BigNumberish,
      _regularFarmRate: BigNumberish,
      _specialFarmRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePool(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateUserBoost(
      _user: string,
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateWhiteList(
      _user: string,
      _isValid: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whiteListMapping(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CAKE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MASTER_CHEF(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MASTER_PID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    add(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _isRegular: boolean,
      _withUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    boostContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burnAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burnCake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cakePerBlock(
      _isRegular: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cakePerBlockToBurn(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cakeRateToBurn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cakeRateToRegularFarm(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cakeRateToSpecialFarm(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBoostValue(
      _user: string,
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    harvestFromMasterChef(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    init(
      dummyToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lastBurnedBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lpToken(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    massUpdatePools(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maxBoostValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingCake(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalRegularAllocPoint(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSpecialAllocPoint(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateBoostContract(
      _newBoostContract: string,
      _maxBoostVal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateBurnAdmin(
      _newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCakeRate(
      _burnRate: BigNumberish,
      _regularFarmRate: BigNumberish,
      _specialFarmRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePool(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateUserBoost(
      _user: string,
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateWhiteList(
      _user: string,
      _isValid: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whiteListMapping(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
